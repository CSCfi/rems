# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2

defaults: &defaults
  docker:
    - image: clojure:openjdk-8-lein-2.8.3
  working_directory: ~/repo
  environment:
    LEIN_ROOT: "true"
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m

jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "project.clj" }}
          # fallback to using the latest cache if no exact match is found
          - v2-dependencies-

      - run: lein deps

      - save_cache:
          paths:
            - ~/.m2
            # node_modules won't pick up updates to sub dependencies
            # unless the project.clj is changed. This might create differences
            # between dev, CI and actual deployment.
            - node_modules
          key: v2-dependencies-{{ checksum "project.clj" }}

  without-db:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "project.clj" }}
      # verify that we can run unit tests without the database:
      - run: DATABASE_URL=invalid lein eftest

  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "project.clj" }}
      - run: ./dev_db.sh
      - run: lein cljtests
      - store_artifacts:
          path: browsertest-errors

  doo:
    # TODO: use a docker image with chrome-headless
    machine: true
    working_directory: ~/repo
    environment:
      LEIN_ROOT: "true"
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "project.clj" }}
      - run: ./dev_db.sh
      - run: lein doo chrome-headless test once

  war:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "project.clj" }}
      - run: lein uberwar
      - store_artifacts:
          path: target/uberjar/rems.war

  # pseudo job to post a single ok status to github after all the tests
  ok:
    executor: docker
    docker:
      - image: alpine
    steps:
      - run: 'true'
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
        - build
        - without-db:
            requires:
              - build
        - test:
            requires:
              - build
        - doo:
            requires:
              - build
        - war:
            requires:
              - build
        - ok:
            requires:
              - build
              - without-db
              - test
              - doo
              - war
