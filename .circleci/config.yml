version: 2.1

# We still use this legacy machine executor for building docker images.
# TODO: use docker executor and setup_remote_docker for these builds.
defaults: &defaults
  machine:
    image: ubuntu-2204:current
  working_directory: ~/repo
  environment:
    LEIN_ROOT: "true"
    # Customize the JVM maximum heap limit
    JVM_OPTS: -Xmx3200m

orbs:
  browser-tools: circleci/browser-tools@1.3.0

executors:
  clojure:
    docker:
      - image: cimg/clojure:1.11.1-browsers
  db:
    docker:
      - image: cimg/clojure:1.11.1-browsers
      - image: postgres:13
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_USER: rems_test

jobs:
  deps:
    executor: clojure
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - &cache-key v4-dependencies-{{ checksum "project.clj" }}-{{ checksum "package-lock.json" }}-{{ checksum "shadow-cljs.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v4-dependencies-
      # shadow-build installs npm packages, builds shadow-cljs app and caches maven deps as well
      - run: lein do deps, shadow-build
      - save_cache:
          paths:
            - ~/.m2
            - node_modules
          key: *cache-key
      # persist shadow-cljs build for browser tests etc
      - persist_to_workspace:
          root: .
          paths:
            - target/shadow
            - .shadow-cljs

  unit-test:
    executor: clojure
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: *cache-key
      # verify that we can run unit tests without the database:
      - run: DATABASE_URL=invalid lein kaocha --reporter kaocha.report/documentation unit
      - run: npm run shadow-test # skips installing npm dependencies as they are already in workspace
      - store_test_results:
          path: target/test-results

  cljfmt:
    executor: clojure
    steps:
      - checkout
      - restore_cache:
          key: *cache-key
      - run: lein cljfmt check

  integration-test:
    executor: db
    steps:
      - checkout
      - restore_cache:
          key: *cache-key
      - run: lein kaocha --reporter kaocha.report/documentation --plugin rems.kaocha/cache-statistics-plugin integration
      - store_test_results:
          path: target/test-results
      - store_artifacts:
          path: target/cache-statistics-plugin

  browser-test:
    executor: db
    resource_class: large
    parallelism: 4
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - checkout
      # include shadow-cljs build
      - attach_workspace:
          at: .
      - restore_cache:
          key: *cache-key
      - run: lein kaocha --reporter kaocha.report/documentation --plugin rems.kaocha/cache-statistics-plugin --plugin rems.kaocha/circleci-parallel-plugin browser
      - store_test_results:
          path: target/test-results
      - store_artifacts:
          path: browsertest-errors
      - store_artifacts:
          path: browsertest-downloads
      - store_artifacts:
          path: browsertest-accessibility-report
      - store_artifacts:
          path: target/cache-statistics-plugin
      - store_artifacts:
          path: target/circleci-parallel-plugin

  build:
    executor: clojure
    steps:
      - checkout
      - restore_cache:
          key: *cache-key
      - run: lein with-profile uberjar uberjar # fix a bug in leiningen 2.9.9-2.9.10, fix in 2.9.11
      - store_artifacts:
          path: target/uberjar/rems.jar
      - persist_to_workspace:
          root: .
          paths:
            - target/uberjar/rems.jar

  docker-snapshot:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: .circleci/docker.sh circle

  docker-release:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: .circleci/docker.sh release

  rahti-dev:
    <<: *defaults
    steps:
      - checkout
      - run: .circleci/rahti-deploy.sh dev

  rahti-demo:
    <<: *defaults
    steps:
      - checkout
      - run: .circleci/rahti-deploy.sh demo

  # pseudo job to post a single ok status to github after all the tests
  ok:
    docker:
      - image: alpine
    steps:
      - run: 'true'

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - deps:
          filters:
            tags:
              only: /.*/
      - unit-test:
          requires:
            - deps
          filters:
            tags:
              only: /.*/
      - integration-test:
          requires:
            - deps
          filters:
            tags:
              only: /.*/
      - browser-test:
          requires:
            - deps
          filters:
            tags:
              only: /.*/
      - cljfmt:
          filters:
            tags:
              only: /.*/
      - build:
          requires:
            - deps
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - docker-snapshot:
          requires:
            - deps
            - build
          filters:
            branches:
              only:
                - master
      - docker-release:
          requires:
            - deps
            - build
          filters:
            tags:
              only: /v[0-9]\.[0-9].*/
            branches:
              ignore: /.*/
      - rahti-dev:
          requires:
            - deps
            - build
            - docker-snapshot
          filters:
            branches:
              only:
                - master
      - rahti-demo:
          requires:
            - deps
            - build
            - docker-release
          filters:
            tags:
              only: /v[0-9]\.[0-9].*/
            branches:
              ignore: /.*/
      - ok:
          requires:
            - deps
            - unit-test
            - integration-test
            - browser-test
            - build
            - cljfmt
          filters:
            tags:
              only: /.*/
